// ***************************
// Date:
// Author:
// Module Name: ALUmux
// Description:
// ***************************
#include "verilated.h"
#include <verilated_vcd_c.h>
// Included with project
#include "include/Testbench.hpp"
//Generated by verilator
#include "VALUmux.h"
// Generated by python script
#include "include/port.hpp"
// Std library
#include <iostream>
#include <string>


template<typename T, typename U>
void print(T val1, U val2) {
    std::cout << val1 << " : " << val2 << std::endl;
}

template<typename T, typename U, typename V>
void print(T val1, U val2, V val3) {
    std::cout << val1 << " : " << val2 << " : " << val3 << std::endl;
}

void assert_output(Testbench *top, int expt_A, int expt_B) {
    top->testPort->o_AluA = expt_A;
    top->testPort->o_AluB = expt_B;
}

void set_inputs(VALUmux * core, int srcA, int srcB, int PC=0, int RegA=0, int RegB=0, int Imm=0) {
    core->i_AluSrcA = srcA;
    core->i_AluSrcB = srcB;
    core->i_PC = PC;
    core->i_RegA = RegA;
    core->i_RegB = RegB;
    core->i_Imm = Imm;
}

int main(int argc, char **argv, char **env) {
    Verilated::commandArgs(argc, argv);
    Testbench *top = new Testbench();
    // Open the trace file for waveform vcd
    top->opentrace("trace/trace.vcd");
    print("\nModule", "ALUmux", "Running Tests");
    int PC = 0x11111111;
    int RegA = 0x55555555;
    int RegB = 0xAAAAAAAA;
    int Imm = 0xF0F0F0F0;

    set_inputs(top->m_core, 0, 0b00, PC, RegA, RegB, Imm);
    assert_output(top, PC, RegB);
    top->eval();
    top->run_tests("Test 1");

    set_inputs(top->m_core, 1, 0b00, PC, RegA, RegB, Imm);
    assert_output(top, RegA, RegB);
    top->eval();
    top->run_tests("Test 2");

    set_inputs(top->m_core, 1, 0b01, PC, RegA, RegB, Imm);
    assert_output(top, RegA, 0b1);
    top->eval();
    top->run_tests("Test 3");

    set_inputs(top->m_core, 0, 0b10, PC, RegA, RegB, Imm);
    assert_output(top, PC, Imm);
    top->eval();
    top->run_tests("Test 4");

    set_inputs(top->m_core, 1, 0b11, PC, RegA, RegB, Imm);
    assert_output(top, RegA, (Imm << 4));
    top->eval();
    top->run_tests("Test 5");



    delete top;
    exit(0);
}
