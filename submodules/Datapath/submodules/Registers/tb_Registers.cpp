// ***************************
// Date:
// Author:
// Module Name: Registers
// Description:
// ***************************
#include "verilated.h"
#include <verilated_vcd_c.h>
// Included with project
#include "include/Testbench.hpp"
//Generated by verilator
#include "VRegisters.h"
// Generated by python script
#include "include/port.hpp"
// Std library
#include <iostream>
#include <string>

int count = 0;
int regwrite;
int memtoreg;
int RegA_addr;
int RegB_addr;
int RegD_addr;
uint32_t Memdata = 0x55555555;
uint32_t ALUout = 0xAAAAAAAA;
bool quiet = false;

template<typename T, typename U>
void print(T val1, U val2) {
    std::cout << val1 << " : " << val2 << std::endl;
}

template<typename T, typename U, typename V>
void print(T val1, U val2, V val3) {
    std::cout << val1 << " : " << val2 << " : " << val3 << std::endl;
}

void set_control_input(VRegisters *m_core, int regwrite, int memtoreg) {
    if (!quiet) std::cout<< "\nCtrl Bits:[regwrite: " << regwrite
    << "] [memtoreg: " << memtoreg << "]" << std::endl;
    m_core->i_regwrite = regwrite;
    m_core->i_memtoreg = memtoreg;
}

void set_register_addresses(VRegisters *m_core, int RegA_addr, int RegB_addr, int RegD_addr){
    if (!quiet) std::cout<< hex << "Reg Addr:[RegA_addr: " << RegA_addr << "] [RegB_addr: "
    << RegB_addr << "] [RegD_addr: " << RegD_addr << "]" << dec << std::endl;
    m_core->i_RegA_addr = RegA_addr;
    m_core->i_RegB_addr = RegB_addr;
    m_core->i_RegD_addr = RegD_addr;
}

void Testbench::set_input(){
    set_control_input(m_core, regwrite, memtoreg);
    set_register_addresses(m_core, RegA_addr, RegB_addr, RegD_addr);
}

std::string assert_reg0_is_zero(Testbench *top, int expected) {
    regwrite =  0;
    memtoreg =  0;

    RegA_addr = 0x0;
    RegB_addr = 0x0;
    RegD_addr = 0x0;
    top->set_input();
    top->tick();
    top->testPort->o_RegA = expected;
    top->testPort->o_RegB = expected;
    count++;
    return "Test: assert_reg0_is_zero";
}

std::string assert_Memdata_loaded_to_Reg(Testbench *top, char reg, int reg_addr) {
    regwrite =  1;
    memtoreg =  1;
    RegA_addr = 0x0;
    RegB_addr = 0x0;
    RegD_addr = reg_addr;
    top->set_input();
    top->tick();
    regwrite =  0;
    memtoreg =  0;
    if(reg == 'A') RegA_addr = reg_addr;
    else RegB_addr = reg_addr;
    RegD_addr = 0x0;
    top->set_input();
    top->tick();
    if(reg == 'A') {
        top->testPort->o_RegA = Memdata;
        top->testPort->o_RegB = 0;
    }
    else {
        top->testPort->o_RegA = 0;
        top->testPort->o_RegB = Memdata;
    }
    count++;
    return "Test: assert_Memdata_loaded_to_Reg";
}

std::string assert_ALUout_loaded_to_Reg(Testbench *top, char reg, int reg_addr) {
    regwrite =  1;
    memtoreg =  0;
    RegA_addr = 0x0;
    RegB_addr = 0x0;
    RegD_addr = reg_addr;
    top->set_input();
    top->tick();
    regwrite =  0;
    memtoreg =  0;
    if(reg == 'A') RegA_addr = reg_addr;
    else RegB_addr = reg_addr;
    RegD_addr = 0x0;
    top->set_input();
    top->tick();
    if(reg == 'A') {
        top->testPort->o_RegA = ALUout;
        top->testPort->o_RegB = 0;
    }
    else {
        top->testPort->o_RegA = 0;
        top->testPort->o_RegB = ALUout;
    }
    count++;
    return "Test: assert_ALUout_loaded_to_Reg";
}

int main(int argc, char **argv, char **env) {
    Verilated::commandArgs(argc, argv);
    Testbench *top = new Testbench(true);
    // Open the trace file for waveform vcd
    top->opentrace("trace/trace.vcd");


    print("Testbench Version", top->version);
    print("Port Version", top->testPort->version);
    print("\nModule", "Registers", "Running Tests");
    top->reset();
    top->m_core->i_Memdata = Memdata;
    top->m_core->i_ALUout = ALUout;
    quiet = true;
    // Behaviour:
    // Test 1: assert_reg0_is_zero
    // Register at address 0 is hard wired to zero
    top->run_tests(assert_reg0_is_zero(top, 0), count);

    // Test 2: assert_Memdata_loaded_to_RegA
    // When memtoreg is set and regwrite is set:
    //      Memdata is written to the register at RegD_addr
    //
    top->run_tests(assert_Memdata_loaded_to_Reg(top, 'A', 0x01), count);
    top->run_tests(assert_Memdata_loaded_to_Reg(top, 'B', 0x02), count);

    // Test 3: assert_ALUout_loaded_to_RegA
    // When !memtoreg and regwrite is set:
    //      ALUout is written to the register at RegD_addr
    top->run_tests(assert_ALUout_loaded_to_Reg(top, 'A', 0x01), count);
    top->run_tests(assert_ALUout_loaded_to_Reg(top, 'B', 0x02), count);

    top->run_tests(assert_reg0_is_zero(top, 0), count);

    // while (top->m_tickcount < 100) {  // !top->done()
    // }
    delete top;
    exit(0);
}
