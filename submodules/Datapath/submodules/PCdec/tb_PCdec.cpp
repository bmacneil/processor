// ***************************
// Date:
// Author:
// Module Name: PCdec
// Description:
// ***************************
#include "verilated.h"
#include <verilated_vcd_c.h>
// Included with project
#include "include/Testbench.hpp"
//Generated by verilator
#include "VPCdec.h"
// Generated by python script
#include "include/port.hpp"
// Std library
#include <iostream>
#include <string>


template<typename T, typename U>
void print(T val1, U val2) {
    std::cout << val1 << " : " << val2 << std::endl;
}

template<typename T, typename U, typename V>
void print(T val1, U val2, V val3) {
    std::cout << val1 << " : " << val2 << " : " << val3 << std::endl;
}

int assert_output(Testbench *top) {
    static int count = 0;
    static int prev = 0;
    int PC;
    int ADDR;

    count++;

    // print("PC Src", int(top->m_core->i_PCsrc));
    switch(int(top->m_core->i_PCsrc)) {
        case 0b01 :
            // print("PC <= ALUout", "");
            PC = top->m_core->v__DOT__ALU_sig;
            break;
        case 0b10 :
            // print("PC <= Imm", "");
            PC = top->m_core->i_Imm;
            break;

        default :
            // print("PC <= ALUresult", "");
            PC = top->m_core->i_ALUresult;
            break;
    }
    // print("PC enable", int(top->m_core->i_PCen));
    if(!int(top->m_core->i_PCen)) {
        // print("PC", PC);
        PC = prev;
    }

    // print("IorD", int(top->m_core->i_IorD));
    if(int(top->m_core->i_IorD)) {
        ADDR = top->m_core->v__DOT__ALU_sig;
    }
    else {
        ADDR = PC;
    }

    top->testPort->o_Address = ADDR;
    top->testPort->o_PC = PC;
    top->testPort->o_ALUout = top->m_core->i_ALUresult;
    prev = PC;
    return count;
}

void set_input(VPCdec * core, int pcsrc, int pcen, int iord) {
    core->i_PCsrc = pcsrc;
    core->i_PCen = pcen;
    core->i_IorD = iord;
}


int main(int argc, char **argv, char **env) {
    Verilated::commandArgs(argc, argv);
    Testbench *top = new Testbench(true);
    // Open the trace file for waveform vcd
    top->opentrace("trace/trace.vcd");
    print("TB Version", top->version);
    print("Port Version", top->testPort->version);

    print("\nModule", "PCdec", "Running Tests");
    top->reset();
    top->m_core->i_Imm = 0xA;
    top->m_core->i_ALUresult = 0x5;
    std::cout << "i_ALUresult : " << hex << 0x5 << std::endl;
    std::cout << "i_Imm : " << hex << 0xA << std::endl;
    set_input(top->m_core, 0b00, 0b1, 0b0);
    top->tick();
    top->run_tests("Test Name", assert_output(top));


    set_input(top->m_core, 0b01, 0b1, 0b0);
    top->tick();
    top->run_tests("Test Name", assert_output(top));

    set_input(top->m_core, 0b10, 0b1, 0b0);
    top->tick();
    top->run_tests("Should output Imm (0xA)", assert_output(top));

    set_input(top->m_core, 0b00, 0b0, 0b0);
    top->tick();
    top->run_tests("Test Name", assert_output(top));

    set_input(top->m_core, 0b01, 0b0, 0b0);
    top->tick();
    top->run_tests("Test Name", assert_output(top));

    set_input(top->m_core, 0b10, 0b0, 0b0);
    top->tick();
    top->run_tests("Test Name", assert_output(top));

    set_input(top->m_core, 0b00, 0b1, 0b1);
    top->tick();
    top->run_tests("Test Name", assert_output(top));

    set_input(top->m_core, 0b01, 0b1, 0b1);
    top->tick();
    top->run_tests("Test Name", assert_output(top));

    set_input(top->m_core, 0b10, 0b1, 0b1);
    top->tick();
    top->run_tests("Test Name", assert_output(top));

    set_input(top->m_core, 0b00, 0b0, 0b1);
    top->tick();
    top->run_tests("Test Name", assert_output(top));

    set_input(top->m_core, 0b01, 0b0, 0b1);
    top->tick();
    top->run_tests("Test Name", assert_output(top));

    set_input(top->m_core, 0b10, 0b0, 0b1);
    top->tick();
    top->run_tests("Test Name", assert_output(top));

    delete top;
    exit(0);
}
